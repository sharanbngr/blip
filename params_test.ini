[params]
## General run parameters
fmin=3e-4
fmax=2e-3
## Duration in seconds, should be compatiable with fmin.
duration=3e5
## Segment length for fft in seconds, should be compatiable with fmin
# Note by SB: Looks like this needs to be at least a factor of 10 larger than 1/fmin to give consistant recoveries.
seglen=1e5
## Sample rate in Hz, should be compatible with fmax
# Note by SB: Looks like this needs to be atleast a factor of 4
# higher than fmax (as opposed to the usual factor of 2) to give
# consistent recoveries.
fs=0.25
Shfile=LISA_2017_PSD_M.npy
## Healpix nside (skymap resolution)
nside=1
## Start time in seconds. Determines starting orbital postion.
tstart = 0

## LISA configuration. Can be stationary or orbiting
lisa_config=orbiting

## Level of the tdi. Can be michelson, xyz or aet
tdi_lev=xyz

# If the load_data flag is set to 1, then the time series data is read in from a file.
load_data=0
datafile=mldc_tdi_withnoise.txt

# Doppler or strain data. MLDC data is doppler, autogenerated data is strain. Can be doppler or strain.
datatype=strain

# fref parameter useful for powerlaw stochastic backgrounds
fref = 25


## Recovery Model description
# write out as spectralmodel1_spatialmodel1+spectralmodel2_spatialmodel2+...
# exception, noise is just 'noise' with no spatial component
# handle duplicates as (e.g.) noise+powerlaw_isgwb-1+powerlaw_isgwb-2
# spectral models available: noise, powerlaw, brokenpowerlaw, truncatedpowerlaw
# spatial models available: isgwb, sph, fixedgalaxy, hotpixel

model=noise+twothirdspowerlaw_isgwb

## Recovery model fixed values
# fixedvals allows you to fix the value of specific parameters in the recovery model
# These parameters will be set to the value provided and not sampled over
# Currently only implemented for the fixedgalaxy and hotpixel spatial models
#fixedvals={'truncatedpowerlaw_fixedgalaxy':{'rh':2.1,'zh':0.3}}
#fixedvals={'powerlaw_hotpixel':{'ra':0,'dec':0.0}}

## Model/Injection aliasing
# optionally specify which models should be associated with which injections
# any models/injections left unspecified will be matched by name as default
# and if no match is found will not be treated as associated (i.e., truevals won't be provided)

# notation is alias={'model_name':'injection_name'}
alias={'powerlaw_isgwb':'powerlaw_isgwb'}


## Hierarchical setup. Only fg_scale_heights_full is currently supported.
hierarchy=fg_scale_heights_full
## spherical harmonic lmax for the b_lms (a_lmax/2)
lmax = 1


[inj]
## Injections
doInj=1

## Injection loading
# Use this to force loading of a BLIP-made injection and associated data from the specified directory
loadInj=0
injdir=./Storage/injload_test/datatest1/
# If true, inj_only will perform only the injection and data generation process, then exit.
inj_only=0

## Injection model description
# Same syntax as for the Recovery Model
# Additional option: "population" generates spectral/spatial distributions from a DWD population

injection=noise+powerlaw_isgwb

# Injection blmax. If not specified, will match to the analysis lmax.
inj_lmax=1


## Trueval dictionary. If doing an sph injection, blms should be given as complex quantities in a comma seperated list in healpix order
# b00 can only be 1. b_{l, -m} = (-1)**m b_lm
# blms = b00, b10, b11 for blmax = 1, alamx = 2 
# blms = b00, b10, b20, b11, b21, b22 for blmax = 2, almax = 4
# blms = b00, b10, b20, b30, b11, b21, b31, b22, b32, b33 for blmax = 3, almax = 6
# e.g. 'blms':[1.0, 0.75, 0.5, 0.7j, 0.7-0.3j, 1.1j]

#truevals = {'noise':{'Np':9e-42,'Na':3.6e-49}}
truevals = {'noise':{'Np':9e-42,'Na':3.6e-49},
	    'powerlaw_isgwb':{'alpha':0.667,'omega0':5e-7}
	   }
#truevals = {'noise':{'Np':9e-42,'Na':3.6e-49},
#	    'powerlaw_pointsource':{'alpha':0.667,'omega0':1e-5,'ra':0,'dec':0}
#	   }
#truevals = {'noise':{'Np':9e-42,'Na':3.6e-49}}
#truevals = {'powerlaw_sph':{'alpha':0.667,'omega0':1e-7,'blms':[1.0, 0.75, 0.7j]},
#	     'noise':{'Np':9e-42,'Na':3.6e-49}
#		}
#truevals = {'noise':{'Np':9e-42,'Na':3.6e-49},
#	    'powerlaw_isgwb-1':{'alpha':0.667,'omega0':1e-7},
#	    'powerlaw_isgwb-2':{'alpha':3,'omega0':5e2}
#	    }
#truevals = {'truncatedpowerlaw4par_galaxy':{'alpha':0.667,'omega0':1e-7,'fcut':1e-3,'fscale':4e-4,'rh':2.1,'zh':0.3},
#	    'noise':{'Np':9e-42,'Na':3.6e-49}
#	     }
#truevals = {'truncatedpowerlaw4par_isgwb':{'alpha':0.667,'omega0':1e-7,'fcut':1e-3,'fscale':4e-4,},
#	    'noise':{'Np':9e-42,'Na':3.6e-49}
#	     }
#truevals = {'brokenpowerlaw_isgwb':{'alpha1':0.667,'omega0':1e-7,'alpha2':4,'fbreak':1e-3},
#	     'noise':{'Np':9e-42,'Na':3.6e-49}
#	     }
#truevals = {'powerlaw_galaxy':{'alpha':0.667,'omega0':1e-7,'rh':3.31,'zh':0.9},
#	     'noise':{'Np':9e-42,'Na':3.6e-49}
#	     }
#truevals = {'noise':{'Np':9e-42,'Na':3.6e-49},
#	    'powerlaw_pointsources':{'alpha':0.667,'omega0':1e-5,'radec_list':[(0,0),(90,45),(-90,0)]}
#	   }


# Population injection
# (these settings also apply to the spatial population injection below)
# Data file
popfile=/mnt/c/Users/Alexander/Documents/LISA/LISA_data/DWD_FullPopulation_Wilhelm_etal_2020_30deg.txt
# Column names (comma-delineated, no spaces)
columns=f,fdot,lat,long,h,i,pol,phase
# Delimiter used in data file. For tab- and space-delimited files, enter tab or space, respectively
delimiter=space
# SNR cut used to determine resolved vs. unresolved sources
SNRcut=7


[run_params] # Parameters related to the run or to the sampler

## Sampler to use. Supported: dynesty, emcee, nessai
sampler=numpyro

verbose=1
# Set doPreProc to 1 to force generation of fake data again rather than using precalculated data in the data_spectrum file
doPreProc=0
# Projection used for making skymaps. Can be 'E' (ecliptic) or 'G' (galactic)
projection=E
# matplotlib colormap used for the skymaps
colormap=magma
# number of live points for the dynesty sampler
nlive=800
# For multiprocessing, number of threads
# Warning: most often, multithreading the dynesty sampler does not result in significant gains as its proposal process must be serial.
Nthreads=1

## If false, disable numpyro progress bar. Disabling improves performance, especially when multithreading
show_progress=1

## GPUs (numpyro only)
# Number of available GPU devices
# If one GPU is available, Nthreads > 1 will *vectorize* chains on a single GPU.
# If more than one GPU is available, BLIP will parallelize across GPUs, setting Nthreads=N_GPU
N_GPU=0

## some nessai flow tuning parameters
# nessai_neurons tunes the # of neurons used in the normalizing flow
# can be "scale_lean", "scale_greedy", or "manual".
# scale_lean/scale_default/scale_greedy scale with the total # of parameters, leaning towards fewer/default/more neurons respectively. manual allows you to set the number of neurons directly with N_neurons (below)
nessai_neurons=scale_default
n_neurons=20
# reset_flow determines how many train/sample iterations go by before the flow is reset. Default 16.
reset_flow=16

## emcee and numpyro sampling parameters
Nburn=100
Nsamples=300

## with (checkpointed) numpyro runs, you can get additional samples after the run has concluded by setting additional_samples in the run directory's param file and doing:
# run_blip [paramsfile] resume
#additional_samples=100

# If FixSeed is true, the sampler will use random states generated by the seed given in the 'seed' parameter below. This allows for reproduction of sampling results; for a given seed value, repeated analyses of the same dataset will produce precisely identical results. The seed can be any unsigned 32-bit integer.
FixSeed=1
seed=42
# Must be .npz file
input_spectrum=data_spectrum.npz

## Checkpointing and restarting (dynesty/nessai/numpyro only)
# If checkpoint is true, the sampler will save its current state every checkpoint_interval seconds (dynesty/nessai) OR as specified with 'checkpoint_at' below (numpyro)
# To resume an interrupted checkpointed run, run blip on the copy of the params file in the output directory with 'resume' as an additional argument
# e.g. python3 run_blip.py [path/to/out_dir/params_file] resume

checkpoint=1

# When to checkpoint (numpyro only).
# Can be 'end' (only saves sampler state at the very end of the run), 'warmup' (saves after warmup phase and at end), or 'interval' (saves after warmup, at end, and after every checkpoint_interval number of samples; need to also specify checkpoint_interval)
# Generally not worth checkpointing while sampling for large models/datasets, as the recompliation and GPU off/onloading time will exceed the sampling time.

#checkpoint_at=end

# Checkpointing interval in seconds (dynesty/nessai) or samples (numpyro)
#checkpoint_interval=600


## Sampling method (dynesty only)
# see https://dynesty.readthedocs.io/en/latest/quickstart.html?highlight=method#sampling-options
# rslice recommended for MW foreground analyses
sample_method=rslice

## output directory
out_dir=./Storage/test_directory_1/
